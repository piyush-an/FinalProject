/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CampOrganizerRole;

import userinterface.CounselorRole.*;
import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.DoctorOrganization;
import Business.Organization.HealthCampOrganization;
import Business.Organization.OrganTissueDonationOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.MedicalFieldCampWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author piyush
 */
public class CampOrganizerRoleJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CounselorJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private HealthCampOrganization HealthCampOrganization;
    private Organization organization;
    private Enterprise enterprise;
    private EcoSystem business;
    private EcoSystem system;
    private Network network;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();

    public CampOrganizerRoleJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, EcoSystem business, Network network) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.HealthCampOrganization = (HealthCampOrganization) organization;
        this.enterprise = enterprise;
        this.business = business;
        this.network = network;
        system = dB4OUtil.retrieveSystem();

        // User function
        populateTable();

    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) CampOrganizationJTable.getModel();
        model.setRowCount(0);

//        Organization org = null;
try {
        for (Enterprise enterpriseEach : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (enterpriseEach.getTypeof().equalsIgnoreCase("Hospital")) {
                for (Organization OrganizationEach : enterpriseEach.getOrganizationDirectory().getOrganizationList()) {
                    if (OrganizationEach.getTypeof().equalsIgnoreCase("DoctorOrganization")) {
                        for (WorkRequest request : OrganizationEach.getWorkQueue().getWorkRequestList()) {
                            Object[] row = new Object[7];
                            row[0] = request;
                            row[1] = ((MedicalFieldCampWorkRequest) request).getFieldCampName();
                            row[2] = ((MedicalFieldCampWorkRequest) request).getVenue();
                            row[3] = ((MedicalFieldCampWorkRequest) request).getStartDate();
                            row[4] = ((MedicalFieldCampWorkRequest) request).getEndDate();
                            row[5] = request.getStatus();
                            row[6] = request.getReceiver();
                            model.addRow(row);
                        }
                    }
                }
            }

        }
}
catch (Exception e){
    
}
//        for (Organization organizationEach : enterprise.getOrganizationDirectory().getOrganizationList()) {
//            if (organizationEach instanceof DoctorOrganization) {
//                org = organizationEach;
//                break;
//            }
//        }
//
//        try {
//            if (org.getWorkQueue().getWorkRequestList().isEmpty()) {
//                return;
//            }
//        } catch (Exception e) {
//            return;
//        }
//        for (WorkRequest request : org.getWorkQueue().getWorkRequestList()) {
//            Object[] row = new Object[7];
//            row[0] = request;
//            row[1] = ((MedicalFieldCampWorkRequest) request).getFieldCampName();
//            row[2] = ((MedicalFieldCampWorkRequest) request).getVenue();
//            row[3] = ((MedicalFieldCampWorkRequest) request).getStartDate();
//            row[4] = ((MedicalFieldCampWorkRequest) request).getEndDate();
//            row[5] = request.getStatus();
//            row[6] = request.getReceiver();
//            model.addRow(row);
//        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        therapyTypes = new javax.swing.ButtonGroup();
        btnHome = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        CampOrganizationJTable = new javax.swing.JTable();
        btnCreateCampEvent = new javax.swing.JButton();

        btnHome.setText("HOME");
        btnHome.setEnabled(false);

        jLabel1.setFont(new java.awt.Font("Shree Devanagari 714", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Medical Field Camps");

        jButton1.setText("RESET");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        CampOrganizationJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "WorkID", "Camp Name", "Venue", "Start Date", "End Date", "Status", "Ownership"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(CampOrganizationJTable);

        btnCreateCampEvent.setText("Create Camp");
        btnCreateCampEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateCampEventActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 888, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnHome)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(btnCreateCampEvent, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(14, 14, 14))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnHome)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btnCreateCampEvent, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(356, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateCampEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateCampEventActionPerformed
        // TODO add your handling code here:

        MedicalFieldCampWorkRequestJPanel MedicalFieldCampWorkRequestJPanel = new MedicalFieldCampWorkRequestJPanel(userProcessContainer, business, network, userAccount, HealthCampOrganization);
        userProcessContainer.add("processWorkRequestJPanel", MedicalFieldCampWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);

//        int selectedRow = CampOrganizationJTable.getSelectedRow();
//        if (selectedRow < 0) {
//            JOptionPane.showMessageDialog(null, "No Row Selected, Please select one");
//            return;
//        }
//        WorkRequest request = (WorkRequest) CampOrganizationJTable.getValueAt(selectedRow, 0);
//
//        if (request.getStatus().equalsIgnoreCase("New Request")) {
//            for (WorkRequest requestCheck : HealthCampOrganization.getWorkQueue().getWorkRequestList()) {
//
//                if(requestCheck.getReceiver() != null && requestCheck.getReceiver().equals(userAccount) && (requestCheck.getStatus().equalsIgnoreCase("Assigned") || requestCheck.getStatus().equalsIgnoreCase("Work In Progress"))){
//                    JOptionPane.showMessageDialog(null, "User already working on a work request");
//                    return;
//                }
//            }
//            request.setReceiver(userAccount);
//            request.setStatus("Assigned");
//            populateTable();
//        } else {
//            JOptionPane.showMessageDialog(null, "This request is already being handled");
//        }
//        populateTable();
    }//GEN-LAST:event_btnCreateCampEventActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        populateTable();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable CampOrganizationJTable;
    private javax.swing.JButton btnCreateCampEvent;
    private javax.swing.JButton btnHome;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.ButtonGroup therapyTypes;
    // End of variables declaration//GEN-END:variables
}
