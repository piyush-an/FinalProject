/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.MedicalDirectorRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Person.Donor;
import Business.Person.DonorDirectory;
import Business.Organ.OrganDirectory;
import Business.Organization.EmotionalOrganization;
import Business.Organization.LegalOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.EmotionalWorkRequest;
import Business.WorkQueue.LegalWorkRequest;
import Business.WorkQueue.TrailWorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author piyush
 */
public class DirectorProcessWorkRequesJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ProcessWorkRequesJPanel
     */
    JPanel userProcessContainer;
    TrailWorkRequest request;
    EcoSystem system;
    OrganDirectory organDirecotry;
    DonorDirectory donorDirectory;
    Network network;
    UserAccount userAccount;

    public DirectorProcessWorkRequesJPanel(JPanel userProcessContainer, TrailWorkRequest request, DonorDirectory donorDirectory, EcoSystem business, Network network, UserAccount userAccount) {
        initComponents();
        this.donorDirectory = donorDirectory;
        this.system = business;
        this.userProcessContainer = userProcessContainer;
        this.request = request;
        this.network = network;
        this.userAccount = userAccount;
        populateTable();
    }

    public void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) OrganAvailJTable.getModel();
        dtm.setRowCount(0);
//        System.out.println("Toget Donor" + system.getDonorDirectory());
        for (Donor d : system.getDonorDirectory()) {
            for (String s : d.getOrgans()) {
                Object[] row = new Object[3];
                row[0] = d;
                row[1] = d.getBloodGroup();
                row[2] = s;
                dtm.addRow(row);

            }

        }


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        OrganAvailJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();
        submitJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        OrganAvailJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Doner Name", "OrganType", "Blood Group"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(OrganAvailJTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 762, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(4, 65, 96));
        jLabel1.setText("DONER DATABASE");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/MedicalDirectorRole/bg1.png"))); // NOI18N

        backJButton.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        backJButton.setForeground(new java.awt.Color(4, 65, 96));
        backJButton.setText("HOME");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        submitJButton.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        submitJButton.setForeground(new java.awt.Color(4, 65, 96));
        submitJButton.setText("Match Organ");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(submitJButton)
                .addGap(50, 50, 50)
                .addComponent(jLabel2))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(backJButton)
                        .addGap(79, 79, 79)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(backJButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(submitJButton))
                .addContainerGap(26, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        MedicalDirectorWorkAreaJPanel dwjp = (MedicalDirectorWorkAreaJPanel) component;
        dwjp.populateTable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed
        
        boolean match = false;
        for (Donor d1 : system.getDonorDirectory()) {
            for (String s : d1.getOrgans()) {
//                System.out.println("Organ Donor:" + s + "   " + "Required organ:" + request.getOrgan().getOrgan_type());
//                System.out.println("Donor blood:" + d1.getBloodGroup() + "   " + "Required blood:" + request.getOrgan().getBlood_type());

                if (s.equalsIgnoreCase(request.getOrgan().getOrgan_type()) && d1.getBloodGroup().equals(request.getOrgan().getBlood_type())) {
                    d1.getOrgans().remove(s);
                    
//                    System.out.println("PIYUSH || Donor Found - " + d1.getName());

                    request.setStatus("Match Found");
                    request.setResolveDate(new Date());
                    /// Piyush -- Start Legal workflows
                    
                    
                    raiseLegalRequest(d1, request);
                    raiseEmotionalRequest(d1, request);

                    match = true;
                    JOptionPane.showMessageDialog(null, "An Organ Match Found");
                    return;
                }
                
                

            }

        }
        if (match == false) {
            request.setStatus("Match Not found");
            JOptionPane.showMessageDialog(null, "Organ Match Not found");
        }
    }//GEN-LAST:event_submitJButtonActionPerformed

    private void raiseLegalRequest(Donor userdonor, TrailWorkRequest userrequest) {

        Organization org = null;
        for (Network eachnetwork : system.getNetworkList()) {
            if (eachnetwork == network) {
                for (Enterprise enterprise : eachnetwork.getEnterpriseDirectory().getEnterpriseList()) {
                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (organization instanceof LegalOrganization) {
                            org = organization;
                            break;
                        }
                    }
                }
            }
        }

        if (org != null) {
            LegalWorkRequest legalwf = new LegalWorkRequest();
            /*
            WorkRequest Ids
        
            OrganTissueDonationOrganization + 
            DoctorOrganization + 
            OrganTissueDonationOrganization + 201
            EmotionalOrganization + 401
            HealthCampOrganization + 
            LabOrganization + 101
            LegalOrganization + 301
            PatientOrganization	+ 
            
             */
            try {
                legalwf.setWorkID(org.getWorkQueue().getWorkRequestList().get(org.getWorkQueue().getWorkRequestList().size() - 1).getWorkID() + 1);
            } catch (Exception e) {
                legalwf.setWorkID(301);
            }
            legalwf.setStatus("New Request");
            legalwf.setMessage("Start Legal Process");
            legalwf.setPatient_name(userrequest.getPatient_name());
            legalwf.setDonor(userdonor);
            legalwf.setRequestDate(new Date());

            org.getWorkQueue().getWorkRequestList().add(legalwf);

            userAccount.getWorkQueue().getWorkRequestList().add(legalwf);
        }
    }

    private void raiseEmotionalRequest(Donor userdonor, TrailWorkRequest userrequest) {

        Organization org = null;
        for (Network eachnetwork : system.getNetworkList()) {
            if (eachnetwork == network) {
                for (Enterprise enterprise : eachnetwork.getEnterpriseDirectory().getEnterpriseList()) {
                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (organization instanceof EmotionalOrganization) {
                            org = organization;
                            break;
                        }
                    }
                }
            }
        }

        if (org != null) {
            EmotionalWorkRequest emotionalwf = new EmotionalWorkRequest();

            try {
                emotionalwf.setWorkID(org.getWorkQueue().getWorkRequestList().get(org.getWorkQueue().getWorkRequestList().size() - 1).getWorkID() + 1);
            } catch (Exception e) {
                emotionalwf.setWorkID(401);
            }
            emotionalwf.setStatus("New Request");
            emotionalwf.setMessage("Start Emotional Process");
            emotionalwf.setPatient_name(userrequest.getPatient_name());
            emotionalwf.setDonor(userdonor);
            emotionalwf.setRequestDate(new Date());

            org.getWorkQueue().getWorkRequestList().add(emotionalwf);
            userAccount.getWorkQueue().getWorkRequestList().add(emotionalwf);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable OrganAvailJTable;
    private javax.swing.JButton backJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton submitJButton;
    // End of variables declaration//GEN-END:variables
}
